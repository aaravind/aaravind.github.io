{"version":3,"sources":["reducers/index.js","reducers/bookReducer.js","actions/bookActions.js","store.js","etc/util.js","components/BookCard.js","components/BookListItem.js","components/BookList.js","components/BookDetails.js","components/CreateBookItem.js","components/BookContainer.js","App.js","serviceWorker.js","index.js"],"names":["rootReducer","combineReducers","bookReducer","state","action","type","bookData","payload","data","activeBook","console","log","tempData","filter","each","id","activeData","middlewares","thunk","store","createStore","composeWithDevTools","applyMiddleware","activeItemHandler","dispatch","setActiveItem","getState","setActiveBookAction","item","createBookItem","createBookAction","Date","now","deleteBookItem","deleteActiveBookAction","BookCard","props","isDetailCard","className","src","alt","onClick","title","Fragment","description","BookListItem","BookList","itemClickHandler","this","length","map","key","Component","connect","activeItem","CreateBookItem","submitHandler","e","preventDefault","createBookItemHandler","bookTitle","bookSubTitle","bookUrl","toggleForm","onChangeHandler","name","target","val","value","setState","isVisible","isActive","onSubmit","htmlFor","onChange","BookContainer","request","Request","method","mode","cache","fetch","then","response","json","error","result","loadData","styles","width","style","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.894512e8.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\nimport { bookReducer } from './bookReducer';\n\nexport const rootReducer = combineReducers({\n    bookReducer\n});\n","import * as actions from '../actions/bookActions';\n\nexport const bookReducer = (state=[], action) => {\n    switch(action.type) {\n        case actions.SET_BOOK_DATA_ACTION: {\n            return {\n                ...state,\n                bookData: [...action.payload.data]\n            }\n        }\n        case actions.SET_ACTIVE_BOOK_ACTION: {\n            return {\n                ...state,\n                activeBook: {\n                    ...action.payload.data\n                }\n            }\n        }\n        case actions.CREATE_BOOK_ACTION: {\n            return {\n                ...state,\n                bookData: [action.payload.data, ...state.bookData],\n                activeBook: {\n                    ...action.payload.data\n                }\n            }\n        }\n        case actions.DELETE_BOOK_ACTION: {\n            console.log('here');\n            const tempData = state.bookData.filter((each) => each.id !== action.payload.id);\n            const activeData = state.activeBook && state.activeBook.id === action.payload.id ? tempData[0] : state.activeBook;\n            return {\n                ...state,\n                bookData: tempData,\n                activeBook: {\n                    ...activeData\n                }\n            }\n        }\n        default: {\n            return state;\n        }\n    }\n}","// Action Types\n\nexport const SET_BOOK_DATA_ACTION = 'SET_BOOK_DATA_ACTION';\nexport const SET_ACTIVE_BOOK_ACTION = 'SET_ACTIVE_BOOK_ACTION';\nexport const CREATE_BOOK_ACTION = 'CREATE_BOOK_ACTION';\nexport const DELETE_BOOK_ACTION = 'DELETE_BOOK_ACTION';\n// Action Creators\nexport const setBookDataAction = (data) => {\n    return {\n        type: SET_BOOK_DATA_ACTION,\n        payload: data\n    }\n}\n\nexport const setActiveBookAction = (data) => {\n    return {\n        type: SET_ACTIVE_BOOK_ACTION,\n        payload: {\n            data: {...data[0]}\n        }\n    }\n}\n\nexport const createBookAction = (data) => {\n    return {\n        type: CREATE_BOOK_ACTION,\n        payload: {\n            data\n        }\n    }\n}\n\nexport const deleteActiveBookAction = (data) => {\n    console.log('here12', data);\n    return {\n        type: DELETE_BOOK_ACTION,\n        payload: {\n            id: data\n        }\n    }\n}","\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport { rootReducer } from './reducers';\n\nconst middlewares = [\n    thunk\n];\n\nconst store = createStore(rootReducer, composeWithDevTools(\n    applyMiddleware(...middlewares)\n));\nexport default store;","\nimport store from '../store';\nimport { setBookDataAction, setActiveBookAction, createBookAction, deleteActiveBookAction } from '../actions/bookActions';\n\nexport const loadData = () => {\n    // var myHeaders = new Headers();\n    // myHeaders.append('Content-Type', 'image/jpeg');\n    \n    var myInit = { method: 'GET',\n            //    headers: myHeaders,\n                mode: 'cors',\n                cache: 'default' };\n    const request = new Request('/data/data.json', myInit);\n\n    fetch(request).then(response => {\n        return response.json();\n    }, error => {\n        console.log(error);\n    })\n    .then(result => {\n        store.dispatch(setBookDataAction(result));\n    })\n}\n\nexport const activeItemHandler = (id) => {\n    store.dispatch(setActiveItem(id));\n}\n\nconst setActiveItem = (id) => {\n    return (dispatch, getState) => {\n        const data = getState().bookReducer.bookData;\n        const activeItem = data.filter(item => {\n            return item.id === id;\n        });\n        dispatch(setActiveBookAction(activeItem));\n    }\n}\n\nexport const createBookItemHandler = (data) => {\n    store.dispatch(createBookItem(data));\n}\n\nconst createBookItem = (data) => {\n    return (dispatch, getState) => {\n        const d = {\n            ...data,\n            id: 'book_'+Date.now()\n        }\n        dispatch(createBookAction(d));\n    }\n}\nexport const deleteBookItem = (data) => {\n    console.log('utile', data);\n    store.dispatch(deleteActiveBookAction(data));\n}\n","import React from 'react';\nimport { activeItemHandler, deleteBookItem } from '../etc/util';\nconst BookCard = (props) => {\n    const { data, isDetailCard } = props;\n    const itemClickHandler = (id) => {\n        activeItemHandler(id);\n    }\n    const deleteBookItemClickHandler = (id) => {\n        console.log(id);\n        deleteBookItem(id);\n    }\n    return (\n        data ? (\n            <div className=\"card\">\n                <img src={data['image-url']} className=\"card-img-top\" alt={data['image-url']} onClick={\n                () => {\n                    itemClickHandler(data.id);\n                }\n            }/>\n                <div className=\"card-body\">\n                    <h5 className=\"card-title\">{data.title}</h5>\n                    { !isDetailCard ?\n                    <button className=\"\" type=\"button\" onClick={\n                        () => {\n                            deleteBookItemClickHandler(data.id);\n                        }\n                    }>Delete</button>\n                    :\n                    ''\n                    }\n                    {/* <p className=\"card-text\">{data['sub-title']}</p> */}\n                    {\n                        isDetailCard && (\n                            <React.Fragment>\n                                <p className=\"card-text\">{data['sub-title']}</p>\n                                <p className=\"\">{data.description}</p>\n                            </React.Fragment>\n                        )\n                    }\n                </div>\n            </div>\n        ) : <React.Fragment />\n    );\n}\n\nexport default BookCard;","import React from 'react';\nimport BookCard from './BookCard';\n\nconst BookListItem = (props) => {\n        const { data } = props;\n        return (\n            <li className=\"book-list-item m-2\">\n                <BookCard data={data} />\n            </li>\n        );\n}\n\nexport default BookListItem;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport { activeItemHandler } from '../etc/util';\nimport BookListItem from './BookListItem';\n\nclass BookList extends Component {\n\n    itemClickHandler = (id) => {\n        activeItemHandler(id);\n    }\n    render() {\n        const { data } = this.props;\n        return (\n            <ul className=\"d-flex flex-wrap book-list\">\n                {\n                    data.length ?\n                    data.map(item => {\n                        return (\n                            <BookListItem data={item} key={item.id}/>\n                        );\n                    })\n                    :\n                    'No books available'\n                }\n            </ul>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    const data = state.bookReducer.bookData ? state.bookReducer.bookData : [];\n    return {\n        data: [...data]\n    }\n}\n\nexport default connect(mapStateToProps)(BookList);","import React, { Fragment } from 'react';\nimport { connect } from 'react-redux';\n\n\nimport BookCard from './BookCard';\n\nconst BookDetails = (props) => {\n    const { activeItem } = props;\n    return (\n        <Fragment>\n        { activeItem && activeItem.id ?\n            <BookCard data={activeItem} isDetailCard={true}/>\n        :\n        ''\n        }\n        </Fragment>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        activeItem: state.bookReducer.activeBook\n    }\n}\n\nexport default connect(mapStateToProps)(BookDetails);","import React, { Component } from 'react';\n\nimport { createBookItemHandler } from '../etc/util';\n\nclass CreateBookItem extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            bookTitle: '',\n            bookSubTitle: '',\n            bookUrl: '',\n            description: '',\n            isActive: false\n        };\n    }\n    submitHandler = (e) => {\n        e.preventDefault();\n        const data = {\n            title: this.state.bookTitle,\n            'sub-title': this.state.bookSubTitle,\n            'image-url': this.state.bookUrl,\n            description: this.state.description\n        }\n        createBookItemHandler(data);\n        this.toggleForm(false);\n    }\n\n    onChangeHandler = (e) => {\n        const name = e.target.name;\n        const val = e.target.value;\n        this.setState({\n            [name]: val\n        });\n    }\n\n    toggleForm = (isVisible) => {\n        this.setState({\n            isActive: isVisible\n        });\n    }\n\n    render() {\n\n        return (\n            <div className=\"create-book-wrapper\">\n                {\n                    !this.state.isActive ? (\n                        <button className=\"\" type=\"button\" onClick={() => {\n                            this.toggleForm(true);\n                        }}>Add Book</button>\n                    ) : (\n                        <div className=\"create-book\">\n                            <form onSubmit={this.submitHandler}>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"bookTitle\">\n                                        <span>Book Name: </span>\n                                        <input id=\"bookTitle\" type=\"text\" name=\"bookTitle\" value={this.state.bookTitle} onChange={this.onChangeHandler}/>\n                                    </label>\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"bookSubTitle\">\n                                        <span>Book Name: </span>\n                                        <input id=\"bookSubTitle\" type=\"text\" name=\"bookSubTitle\" value={this.state.bookSubTitle} onChange={this.onChangeHandler}/>\n                                    </label>\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"imageUrl\">\n                                        <span>Image URL: </span>\n                                        <input id=\"bookUrl\" type=\"text\" name=\"bookUrl\" value={this.state.bookUrl} onChange={this.onChangeHandler}/>\n                                    </label>\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"description\">\n                                        <span>Description: </span>\n                                        <textarea id=\"description\" name=\"description\" value={this.state.description} onChange={this.onChangeHandler}></textarea>\n                                    </label>\n                                </div>\n                                <button type=\"submit\">Add Book</button>\n                            </form>\n                        </div>\n                    )\n                }\n            </div>\n        );\n    } \n}\n\nexport default CreateBookItem;","import React, { Component } from 'react';\n\nimport { loadData } from '../etc/util';\nimport BookList from './BookList';\nimport BookDetails from './BookDetails';\nimport CreateBookItem from './CreateBookItem';\n\nclass BookContainer extends Component {\n\n    componentDidMount() {\n        loadData();\n    }\n\n    render() {\n        const styles = {\n            width: '50%'\n        }\n        return (\n            <div className=\"container book-container\">\n                <div className=\"d-flex\">\n                    <div className=\"book-list\" style={styles}>\n                        <CreateBookItem />\n                        <BookList />\n                    </div>\n                    <div className=\"book-details\" style={styles}>\n                        <BookDetails />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default BookContainer;","import React from 'react';\n\nimport BookContainer from './components/BookContainer';\n\nimport './App.css';\n\nfunction App() {\n\treturn (\n\t\t<BookContainer />\n\t)\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\n\nimport store from './store';\nimport App from './App';\nimport './index.scss';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}